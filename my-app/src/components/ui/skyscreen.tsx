"use client";

import React, { useEffect, useRef, useState, useMemo } from "react";
import gsap from "gsap";
import VideoBackground from "../ui/VideoBackground";

/* -------------------------------------------------------
   SkyMessageScene ‚Äì ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á + ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à
   Flow: intro ‚Üí form ‚Üí empathy ‚Üí finale ‚Üí food
---------------------------------------------------------*/

type Props = {
  videoSrc: string;
  userName: string;
  onDone?: () => void; // callback ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏ö‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á (optional)
};

type Phase = "intro" | "form" | "empathy" | "finale" | "food";

const SkyMessageScene = ({ videoSrc, userName, onDone }: Props) => {
  /* ---------- state ---------- */
  const [phase, setPhase] = useState<Phase>("intro");
  const [message, setMessage] = useState("");
  const [foodRemember, setFoodRemember] = useState<"yes" | "no" | null>(null);

  /* ---------- refs ---------- */
  const introRef = useRef<HTMLDivElement | null>(null);
  const formRef = useRef<HTMLDivElement | null>(null);
  const empathyRef = useRef<HTMLDivElement | null>(null);
  const finaleRef = useRef<HTMLDivElement | null>(null);
  const foodRef = useRef<HTMLDivElement | null>(null);
  const noMsgRef = useRef<HTMLParagraphElement | null>(null);

  /* ---------- memo bg video ---------- */
  const bgVid = useMemo(
    () => (
      <VideoBackground
        key="sky-bg"
        videoSrc={videoSrc}
        audioSrc=""
        onVideoReady={() => {}}
      />
    ),
    [videoSrc]
  );

  /* ---------- intro ‚Üí form (5‚ÄØs) ---------- */
  useEffect(() => {
    if (phase !== "intro") return;
    const el = introRef.current;
    if (!el) return;
    const t = setTimeout(() => {
      gsap.to(el, {
        opacity: 0,
        y: -30,
        duration: 1.2,
        ease: "power2.in",
        onComplete: () => setPhase("form"),
      });
    }, 5000);
    return () => clearTimeout(t);
  }, [phase]);

  /* ---------- fade‚Äëin each phase ---------- */
  useEffect(() => {
    const refMap = { intro: introRef, form: formRef, empathy: empathyRef, finale: finaleRef, food: foodRef } as const;
    const el = refMap[phase].current;
    if (!el) return;
    gsap.fromTo(el, { opacity: 0, y: 30 }, { opacity: 1, y: 0, duration: 1.6, ease: "power2.out" });
  }, [phase]);

  /* ---------- finale ‚Üí food (5‚ÄØs) ---------- */
  useEffect(() => {
    if (phase !== "finale") return;
    const t = setTimeout(() => setPhase("food"), 5000);
    return () => clearTimeout(t);
  }, [phase]);

  /* ---------- fade "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞‚Ä¶" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å no ---------- */
  useEffect(() => {
    if (phase !== "food" || foodRemember !== "no" || !noMsgRef.current) return;
    gsap.fromTo(noMsgRef.current, { opacity: 0, y: 20 }, { opacity: 1, y: 0, duration: 1.4, ease: "power2.out" });
  }, [phase, foodRemember]);

  /* ---------- call onDone ---------- */
  useEffect(() => {
    if (phase !== "food" || foodRemember === null || typeof onDone !== "function") return;
    const delay = foodRemember === "yes" ? 5000 : 7000; // extra time‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏ö‡πÉ‡∏à
    const t = setTimeout(onDone, delay);
    return () => clearTimeout(t);
  }, [phase, foodRemember, onDone]);

  /* ---------- render ---------- */
  return (
    <div
      style={{ position: "absolute", inset: 0, zIndex: 70, pointerEvents: ["form", "empathy", "food"].includes(phase) ? "auto" : "none" }}
    >
      {bgVid}

      {/* ---------- INTRO ---------- */}
      {phase === "intro" && (
        <div ref={introRef} style={{ position: "absolute", inset: 0, display: "flex", justifyContent: "center", alignItems: "center" }}>
          <p style={{ fontSize: "clamp(1.6rem,4vw,2.6rem)", color: "#fff", textAlign: "center", textShadow: "2px 2px 6px #000" }}>
            ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡∏™‡∏î‡πÉ‡∏™
          </p>
        </div>
      )}

      {/* ---------- FORM ---------- */}
      {phase === "form" && (
        <div
          ref={formRef}
          style={{ position: "absolute", inset: 0, display: "flex", flexDirection: "column", justifyContent: "center", alignItems: "center", padding: "0 6vw", textAlign: "center", color: "white" }}
        >
          <p style={{ fontSize: "clamp(1.2rem,3.8vw,2rem)", marginBottom: "1.5rem", textShadow: "2px 2px 6px #000" }}>
            ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≠‡∏á‡∏£‡∏≠‡∏ö‡πÜ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏®‡∏£‡πâ‡∏≤<br />‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏°‡∏±‡πâ‡∏¢?
          </p>
          <textarea
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á..."
            rows={4}
            style={{ width: "100%", maxWidth: 600, padding: "1rem", fontSize: "1rem", borderRadius: 16, border: "1px solid rgba(255,255,255,0.5)", background: "rgba(0,0,0,0.35)", color: "white", resize: "vertical", marginBottom: "1.5rem" }}
          />
          <button
            onClick={() => setPhase("empathy")}
            disabled={!message.trim()}
            style={{ padding: "0.9rem 2.4rem", borderRadius: 40, border: "1px solid rgba(255,255,255,0.5)", background: "rgba(255,255,255,0.2)", color: "white", fontSize: "1rem", fontWeight: 700, cursor: "pointer" }}
          >
            ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          </button>
        </div>
      )}

      {/* ---------- EMPATHY ---------- */}
      {phase === "empathy" && (
        <div
          ref={empathyRef}
          style={{ position: "absolute", inset: 0, display: "flex", flexDirection: "column", justifyContent: "center", alignItems: "center", textAlign: "center", padding: "0 6vw", color: "white" }}
        >
          <p style={{ fontSize: "clamp(1.3rem,4vw,2.2rem)", marginBottom: "2rem", textShadow: "2px 2px 6px #000" }}>
            ‡πÄ‡∏£‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à&nbsp;{userName}&nbsp;‡∏ô‡∏∞&nbsp;{userName}&nbsp;‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÜ ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞<br />‡πÄ‡∏£‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡πÄ‡∏Å‡πà‡∏á‡∏î‡∏π‡∏™‡∏¥‡πà‡∏á‡∏ô‡∏µ‡πâ&nbsp;‡πÅ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏™‡∏¥ üíñ
          </p>
          <button
            onClick={() => setPhase("finale")}
            style={{ width: 90, height: 90, borderRadius: "50%", border: "none", background: "rgba(255,255,255,0.25)", color: "#FF6B6B", fontSize: "2.4rem", cursor: "pointer", transition: "transform .3s" }}
            onMouseOver={(e) => (e.currentTarget.style.transform = "scale(1.1)")}
            onMouseOut={(e) => (e.currentTarget.style.transform = "scale(1)")}
          >
            ‚ù§Ô∏è
          </button>
        </div>
      )}

      {/* ---------- FINALE ---------- */}
      {phase === "finale" && (
        <div ref={finaleRef} style={{ position: "absolute", inset: 0, display: "flex", justifyContent: "center", alignItems: "center" }}>
          <p style={{ fontSize: "clamp(1.4rem,4vw,2.4rem)", color: "#FFF", textAlign: "center", textShadow: "2px 2px 6px #000", lineHeight: 1.6, padding: "0 6vw" }}>
            ‡∏´‡∏≤‡∏Å‡πÉ‡∏ô‡πÉ‡∏à&nbsp;{userName}&nbsp;‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏∑‡∏î‡∏Ñ‡∏£‡∏∂‡πâ‡∏°<br />‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ü‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏î‡πÉ‡∏™‡πÉ‡∏´‡πâ‡∏ô‡∏∞
          </p>
        </div>
      )}

      {/* ---------- FOOD ---------- */}
      {phase === "food" && (
        <div
          ref={foodRef}
          style={{ position: "absolute", inset: 0, display: "flex", flexDirection: "column", justifyContent: "center", alignItems: "center", textAlign: "center", padding: "0 6vw", color: "white" }}
        >
          <p style={{ fontSize: "clamp(1.3rem,4vw,2.2rem)", marginBottom: "2rem", textShadow: "2px 2px 6px #000" }}>
            ‡∏à‡∏≥‡πÑ‡∏î‡πâ‡∏°‡∏±‡πâ‡∏¢‡∏ï‡∏≠‡∏ô‡πÄ‡∏î‡πá‡∏Å ‡πÜ&nbsp;{userName}&nbsp;‡∏ä‡∏≠‡∏ö‡∏Å‡∏¥‡∏ô‡∏≠‡∏∞‡πÑ‡∏£?
          </p>
          <div style={{ display: "flex", gap: "2rem", marginBottom: foodRemember === "no" ? "1.5rem" : "2.5rem" }}>
            <label style={{ display: "flex", alignItems: "center", gap: "1.0rem", cursor: "pointer" }}>
              <input type="radio" name="foodMemory" checked={foodRemember === "yes"} onChange={() => setFoodRemember("yes")}/>
              <span>‡∏à‡∏≥‡πÑ‡∏î‡πâ</span>
            </label>
            <label style={{ display: "flex", alignItems: "center", gap: "1.0rem", cursor: "pointer" }}>
              <input type="radio" name="foodMemory" checked={foodRemember === "no"} onChange={() => setFoodRemember("no")}/>
              <span>‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ</span>
            </label>
          </div>

          {/* ‡∏õ‡∏•‡∏≠‡∏ö‡πÉ‡∏à‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ */}
          {foodRemember === "no" && (
            <p
              ref={noMsgRef}
              style={{ fontSize: "clamp(1.1rem,3.5vw,1.8rem)", textShadow: "2px 2px 6px #000", lineHeight: 1.6 }}
            >
              ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏ô‡∏∞ ‡∏Ñ‡πà‡∏≠‡∏¢ ‡πÜ ‡∏ô‡∏∂‡∏Å‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏ô‡∏∞ ü§ç
            </p>
          )}
        </div>
      )}
    </div>
  );
};

export default SkyMessageScene;
